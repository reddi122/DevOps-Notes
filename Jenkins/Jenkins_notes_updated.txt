# Importance of Continuous Integration:
=======================================

	1). Improves Quality: Improves the quality by running multiple unit tests and analyzing various static codes.
	    ----------------

	2). Improves Productivity: Automating the build of code saves a lot of time, thereby increasing productivity.
         ----------------------

	3). Reduces Risk: Eliminate the risk of potential human errors by automating tests.
         -------------


# Features of Jenkins:
======================

	-> Easy Installation process.

	-> Provides advance security.

	-> Optimized performance.

	-> Upgrades are easily available.

	-> Lightweight container support.

	-> Distributed team management.


# What is Continuous Integration:
=================================

	-> It is the process of automating the building and testing of code, each time one of the team member commit changes to version control.

	-> CI: Continuous Integration.

	-> CD: Continuous Delivery (also known as Release)

				  (or)

			Continuous Deployment

	-> Eg: Development --> Source Control --> Build --> Testing.


# Popular Continuous Integration Tools:
=======================================

	-> Gitlab CI

	-> Codeship

	-> Bamboo

	-> Jenkins

	-> TeamCity

	-> Trans CI

	-> From the AWS cloud if we wanted to perform CI/CD, there are various services like code commit, code deploy, code guru, code build, and code pipeline.

	-> From the Azure cloud, we have Azure DevOps, repos, pipelines, test plans, Boards, and Artifacts.


# What is Jenkins:
=================

	-> A Continuous Integration server that manages and controls processes such as planning, coding, building, testing, deploying, operating, and monitoring in DevOps Environment.

		
			PLAN						DEPLOY
		
										
			CODE
									OPERATE
					    JENKINS
			BUILD	   
 				 
									MONITOR
			TEST


# Why Jenkins is so popular:
============================

	-> Open source.

	-> Good plugin support.

	-> Good Community support.

	-> Fast and Reliable.

	-> Good OS support.

	-> Scripted Builds.



# Topics:
=========

	## Following are the topics covered in this module:
		
		-> Jenkins Architecture.

		-> Plugin Management in Jenkins.

		-> Jenkins Security management.

		-> Notification in Jenkins.

		-> Jenkins master-slave architecture.

		-> Jenkins delivery pipeline.

		-> Jenkins declarative pipeline.


# Jenkins Architecture: Source Control Management:



	  +--------------------+
        |    Developers      |
        +--------------------+
                 |
                 v
        +--------------------+
        |    Source Control  |  (Git, SVN)
        +--------------------+
                 |
                 v
        +--------------------+
        |      Jenkins       |
        |   (CI Server)      |
        +--------------------+
        |  - Build Trigger  |
        |  - Job Execution  |
        +--------------------+
                 |
     ------------------------
     |                      |
     v                      v
+------------+        +------------+
|   Build    | -----> |   Test     |
|  (Maven,   |        | (Selenium, |
|  Gradle)   |        |  JUnit)    |
+------------+        +------------+
     |                      |
     v                      v
+------------+        +------------+
|   Deploy   | -----> | Monitoring |
| (Docker,   |        | (Nagios,   |
| Kubernetes)|        |  Prometheus)|
+------------+        +------------+
                 |
                 v
        +--------------------+
        |    Production      |
        +--------------------+




# Plugin Management in Jenkins:
===============================

	-> Tabs
	   -----
		- Update: Shows updates to plugins already installed.
	       -------

		- Available: Shows plugins that are available for installation.
		  ---------

		- Installed: Displays plugins installed that have no updates.
		  ---------

		- Advanced: Lists configuration of HTTP proxy, allows manual upload of the plugin and URL of plugin site.
		  ---------


	-> Note: In real-time, we can't install the plugin as simple as that because there might be challenges in proxy settings.
	   ----


# How to Install Jenkins on Windows:
====================================

	-> Different Ways of Installation:

		- Using Docker.

		- Using Kubernetes.

		- Using War file.

		- Using Windows.

		- Using Linux.


# Prerequites:
==============

	-> Minimum hardware requirements:

		- 256 MB of RAM.

		- 1 GB of drive space (although 10 GB is a recommended minimum if running Jenkins as a Docker container).


	-> Recommended hardware configuration for a small team:

		- 4 GB+ of RAM.

		- 50 GB+ of drive space.

	->Note: Jenkins tool is developed on Java code.
	  ----

	-> A system running Windows 10.

	-> The latest copy of JDK or JRE.

	-> Access to an account with administrator privileges.

	-> Internet.



# Install Jenkins on Windows:
============================

	-> Browse to the official Jenkins download page, under the downloading Jenkins section is a list of installers for long-term support.

		- Click the Windows link to begin downloading Jenkins.

		- After downloading, Go to file manager and click on the Jenkins file (file type is Windows installer package).

		- The setup wizard starts. click next to proceed.

		- Select the install destination folder and click next to continue.

		- Under the run service as a local or domain user option, enter the domain username and password for the user account you want to run Jenkins with click test credentials to 
	
		  verify the login.

			|
			v

		  Select Runs as a local system.

		- Enter the port number you want Jenkins to run on. Click the test port to check if the selected port is available, then click next to continue.

			|
			V

		  Default port number: 8080

		- Select the directory where Java is installed on your system and click next to proceed.

		- Select the features you want to install with Jenkins and click Next to continue.

		- Click Install to start the installation process.


# How to Configure Jenkins:
==========================

	-> After completing the installation process, you have to unblock Jenkins before you can customize and start using it.

		1) In your web browser, navigate to the port number you selected during the installation using the following address.

			- http://localhost:[port number]

			ex: http://localhost:8080

		2) Navigate to the location on your system specified.

			- Please copy the password from the location.

				-- (C:\ProgramData\Jenkins\.jenkins\secrets\initialAdminPassword)

			- Where the initial admin password is a file, in order to read the data of that file use "cat" command.

				-- (cat C:\ProgramData\Jenkins\.jenkins\secrets\initialAdminPassword)


		3) Copy the password from the initial Admin Password file.

		4) Paste the password in the Administrator password field on the unblock Jenkins page and click continue to proceed.

		5) Click the install suggested plugins button to have Jenkins automatically install the most frequently used plugin.

		6) After Jenkins finishes installing the plugins, enter the required information on the Create First admin user page. Click save and continue to proceed.


# How to stop Jenkins server in Windows:
=======================================

	-> Search for services --> Select Jenkins --> On the left side, there are stop and restart options, click on stop.


# How to restart the Jenkins:
============================

	-> Safe Restart: Go to the URL of Jenkins "http://localhost:8080/safeRestart"

		- Jenkins will try to pause jobs and restart once all running jobs are either finished or paused.



# Plugin Installation:
=====================

	-> There are two ways to install the plugin.

		1) Automatically: Once you log into Jenkins GUI, on the left side, you will see the option to manage Jenkins. Click on manage Jenkins, In the first tab there is a system
		   -------------
configuration. Under that select plugins. Next, go to the available plugins and search for the plugin which is required, Select the plugin under the list, Once the plugin is, install 

The button is highlighted, so click on the install button.

	
		2) Manually: Under the plugins tab, go for available plugins search for the plugin, and click on the plugin, that is required, once you click on the plugin new tab is 
		   --------
open, then click on releases, and under releases you will see the versions of the plugins, Go for the plugins which is required, under the install option. Click on the direct link, it 

will downloaded to our local system.

	
	-> When we install plugins automatically, the extension of the plugin is "jpi" (Jenkins Plugin).

	-> When we install plugins in a manual way, the extension of the plugin is "hpi" (Hudson plugin).


# How to uninstall the Plugin?
==============================

	-> Manage Jenkins --> Plugins --> Installed plugins --> search plugin name which we wanted to uninstall --> select the plugin and then uninstall button will be highlighted --> 

once clicked on uninstall, the plugin will get uninstalled.



# How to update the Plugin?
==========================

	-> Manage Jenkins --> Plugins --> Updates --> Select the plugin and then the update button will be highlighted, once clicked on update, the plugin will get updated.

	-> Note: In real time we should not update the plugin directly because there may be challenges encountered. It will be recommended to update the plugin in your local 

machine, where other team members will not be affected.


# How to create the users:
==========================

	-> Manage Jenkins --> Security --> Users (create/delete/modify users that can log into this Jenkins) --> Click on create users --> Give a username, password, name, and email then 

click on the Create User button.


# How to give permissions to the users:
=======================================

	-> Manage Jenkins --> Security(secure Jenkins, define who is allowed to access/use the system) --> Click on that security you will get the Authorization page --> You will click

the add user button and click on the add user button. --> It will ask user ID, give userId, and click on the ok button.

	-> After that you should see the added user name --> Then give the permission for the users by checking the box (minimum access to give is overall read)

	-> Note: By default whatever we create for the users, will get stored in Jenkin's own user database. Jenkin's own user database is suitable for smaller setups where you have no 

existing user database elsewhere. Another option is LDAP (Lightweight directory access protocol)



# Authorization Strategies:
===========================

	-> By default, project-based matrix authorization strategy, with this we can manage the authorization based on the options available under the strategy.	

		- eg: Credentials, Agent, Job ...etc.


# Matrix Authorization Strategy:
===============================

	-> Use Cases: Matrix Authorization allows configuring the lowest level permission, such as starting new builds, configuring items or deleting them individually.


# Jenkins Projects (Project [or] Job):
=====================================

	1). Freestyle project: Classic, general-purpose job type that checks out from up to one SCM, executes build steps serially, followed by post-build steps like archiving artifacts 
	    -----------------
and sending email notifications.

	2). Pipeline: Orchestrates long-running activities that can span multiple build agents. Suitable for building pipelines (formerly known as workflows) and/or organizing complex 
	    --------
activities that do not easily fit in a free-style job type.

	3). Multi-configuration project: Suitable for projects that need a large number of different configurations, such as testing on multiple environments, platform-specific builds, 
	    ---------------------------
etc.

	4). Folder: Creates a container that stores nested items in it. Useful for grouping things. Unlike view, which is just a filter, a folder creates a separate namespace, 
	    ------
so you can have multiple things of the same name as long as they are in different folders.

	5). Multibranch Pipeline: Creates a set of Pipeline projects according to detected branches in one SCM repository.
	    --------------------	
	6). Organization Folder: Creates a set of multibranch project subfolders by scanning for repositories.
	    -------------------


# How to Create a Job (or) Project in Jenkins:
=============================================

	-> In Jenkins GUI --> click on new item --> Enter the item name --> select item type --> once selected any item, then click on ok --> the job configuration is consists of general 

(where we can give information/description about the project), source code management where we will be passing URLs of the repositories, build triggers (In what way we wanted to build 

that job), build environment, build steps (where we can add tasks), and post-build actions.


# How to get a Free-Style Job (or) Project:
==========================================

	-> New Item --> Give job name/item name --> Select freestyle project --> Click on ok.

	-> Build steps (configuration) --> add build step dropdown --> select execute windows batch command --> type dir --> Click on save.

	-> Then click on build Now " and check for console output.


# What if a Jenkins user forgets the password?
===========================================

	-> As the Jenkins administrator there is a provision to reset the user's credentials.

	-> manage Jenkins --> security --> users --> Go for the user that needs to be reset and click on security (on the left side you will see the option) --> See password and confirm

	   password. There you can change the password and click on save.

	-> Once an administrator changes the password again you need to inform the user saying please, follow the below steps to log in.

	-> Once logged into the Jenkins GUI, click on user name --> Click on security --> there you can change the password.

	-> Note: Slaves, nodes, agents these three terminologies are the same.
	   ----


# Jenkins Folders :
=================

	-> In Windows OS we can see all Jenkins information and configuration details under the path.

			[C:\ProgramData\Jenkins\.jenkins\workspace\demo>dir]

	-> Under the .jenkins folder, we can see the user folder (where all the Jenkins user data is available).

	-> Workspace: where all the configured job information is available.
	   ---------
	-> Secrets: Where all the configured secrets are available.
	   -------
	-> Plugins: all the plugins (which are installed manually and automated) are available.
	   -------
	-> Nodes: where all the configured nodes are available.
	   -----
	-> Logs: we can see slaves (if configured) and tasks logs are available.
	   ----
	-> Apart from the above folders there is Jenkins configurational file namely config.xml (if at all changing the config.xml file first take the backup of the file )
	
	-> We can also see the Jenkins logs in the GUI.

		[manage jenkins --> status information --> system log --> all jenkin logs]


# Where we can see the Jenkins version?
======================================

	-> We can see the Jenkins version at the bottom of Jenkins GUI and also.

		[manage jenkins --> status information --> about jenkins]


# Ways to trigger the Jenkins jobs:
===================================

	-> Triggers: Set up automated actions that start your build based on specific events, like code changes or scheduled times.

	## There are five ways :

		1). Trigger builds remotely (eg, from scripts):
		    ------------------------------------------	 

			-> In order to use this option/trigger, first we need to generate the authentication token of the job.

			-> Enable this option if you would like to trigger new builds by accessing a special pre-defined URL (Convenient for scripts)
		
			-> You need to provide an authorization token in the form of a string so that only those who know it would be able to remotely trigger this project's builds.

			-> This is most useful when your Jenkins instance grants read access to this job to anonymous users.

			-> When that's not the case, Jenkins will reject requests sent to the trigger URL even when the correct token is specified.

			-> Use the following URL to trigger the build remotely :

				[JENKINS_URL/job/ajafreestyle/build?token=TOKEN_NAME or /buildWithParameters?token=TOKEN_NAME]


		2) . Build after other projects are built (upstream and downstream jobs):
		     --------------------------------------------------------------------

			-> Set up a trigger so that when some other projects finish building, a new build is scheduled for this project.

			-> This is convenient for running extensive tests after a build is complete.

			-> We need to pass the job name (which is configured already under projects to the watch tab)

			-> Under projects to watch, there are 4 options:

				- Trigger only if the build is stable.

				- Trigger even if the build is unstable.

				- Trigger even if the build fails.

				- Always trigger, even if the build is aborted.


		3). Build periodically(in schedule):
		    -------------------------------

			-> This field follows the syntax of CRON (with minor differences). Specifically, each line consists of 5 fields separated by TAB or whitespace.

			-> eg: MINUTE HOUR DOM MONTH DOW

				- Minute: Minutes within the hour (0-59)

				- Hour: The Hour of the day (0-23)

				- DOM: The day of the month (1-31)

				- Month: The Month (1-12)

				- DOW: The day of the week (0-7) where 0 and 7 are Sunday.

			-> To specify multiple values for one field, the following operations are available.

			-> For reference / Practice use this website [crontab.guru].


		4).GitHub hook trigger for GIT SCM Polling:
		   ---------------------------------------

			-> When Jenkins receives a GitHub push hook, the GitHub plugin checks to see whether the hook came from a GitHub repository that	matches the Git repository defined in 

			   the SCM/Git section of this job.


		5). Poll SCM: Configure Jenkins to poll changes in SCM.
		    --------

	-> Note: We can also trigger the job manually (a total of six ways we can trigger the job).
	   ----



# I Need to trigger on Feb 8th Saturday every minute and in every hour:
=======================================================================

	-> Minute Hour DayofMonth Month DOW

			* * 8 2 6

	   Where:

		* = Every Minute

		* = Every Hour

		8 = Day of Month

		2 = Month (February)

		6 = Day of Week (Saturday)


# Job configuration of build periodically trigger and poll SCM trigger:
=======================================================================

	-> create new item --> triggers --> select check box build periodically or poll SCM --> once clicked on check box, scheduling comment box will open up.

	-> There we need to give the schedule as per requirement eg (* * 8 2 6) --> Save (check for the jobs whether running as per the schedule or not).


# Build after projects are built:
================================

	-> Create more than 1 job in the triggers option, and select build after other projects are built.

	-> After selecting the option, need to give projects the watch name and then click on save and check.

		Eg: job1,job2,job3

	-> For job2, put the upstream project as the job1

	-> For job3, put the upstream project as the job2

	-> When we build job1, once job1 is completed automatically downstream project has to be built.

	-> For job2, once you select built after other projects are built, and then select sub-option trigger even if the build falls and then save.

	-> For job1, do one mistake wantedly and check for all the jobs.


# Pipeline Project:
===================

	-> We are going for pipeline projects in order to secure the CI-CD pipeline code by storing it in any of the repositories (Github, Gitlab, bitbucket)

	-> Sample hello-world script creation :

		- Click on a new item, select pipeline, and click on ok.

		- Go for pipeline in configuration, where we can define pipeline script.

		- We can script in script tag or else we can take it from SCM.

		- In the script tag, click on the drop-down option to try the sample pipeline.


					pipeline{
 						agent any
 						stages{
   							stage('hello'){
     								steps{
       								echo 'hello world'
     								}
   							}
 						}
					}
  
		- Click on save.

	-> Make sure that the stage view plugin should be installed, so that we can see stages.


# Rebuild VS Replay:
====================

	-> When we use Rebuild, we are not changing anything, whereas Reply gives us permission to change the code then and there.

	-> Replay, we also use it as one of the trouble-shooting mechanisms.

	-> If we do not know how to write pipeline script code, we can take advantage of the snippet generator in the pipeline syntax option (the pipeline syntax option will only be

visible when you create a pipeline job or project.)

	-> The Snippet generator will help you learn the pipeline script code which can be used to define various steps.

	-> Pick a step you are interested in from the list, configure it, click generate pipeline script, and you will see a pipeline script statement that would call the step with that

configuration.

	-> You may copy and paste the whole statement into your script, or pick up just the options you care about.

		Eg: To print the message.

	-> In the sample step of snippet generator, search for the echo, there is a step echo: print message then what message we need to print we have to pass it in the message block 

	-> Then click on generate pipeline script, which will give us a script to print a message.

	-> By default, pipeline execution will work serially (one by one), if the previous stage is passed then only it will go for the next or further stages.



Jenkins-day5

===========



# How do you change the default port number of Jenkins?
====================================================

--> Go to the path: `C:/Program Files/Jenkins`.

--> Here in this folder, we can find the `jenkins.xml` file.

--> Search for `--httpPort=8080` in the `jenkins.xml` file, where `8080` is the default port number.

--> To change this default port number, replace `8080` with the desired port number.

--> Save the file.

--> Once modified the Jenkins. xmlfile restart the Jenkins server.


Note: Before Making any changes to Jenkins Configuration or port number, it's better to Take a backup of the original files to be on the safe side.
=====

 
# What if the Jenkins Administrator forgot the password?
=======================================================
 

--> Go to Jenkins home directory:

    	C:/ProgramData/Jenkins/.jenkins`

--> In that path, open `config.xml`, and search for:
  
	<useSecurity>true</useSecurity>
   
--> Replace 'true' with 'false'.

--> Save the file.

--> Now, access the Jenkins server in a browser; login details will not be required.

--> Go to `Manage Jenkins` → `Security`.

   - 'Security Realm' (When we change the `config.xml` file from `true` to `false`, it will be set to `none`).

   - Change from `none` to 'Jenkins’ own user database`.

--> Change Authorization settings:

   - When true is set to `false`, the authorization will change to `Anyone can do anything`.

   - Change from `Anyone can do anything` to either `Matrix-based` or `Project-based` strategy.

--> Uncheck 'Anonymous' under the `Users` category.

--> Now, add a user and assign the `Administrator` role.

--> Save the settings.

--> Navigate to 'Manage Jenkins' → `'Users' → 'Admin', then change the admin user password.

--> Restart the Jenkins server.

    **Note: is better to take a backup of the 'config.xml' file before proceeding.

--> After restarting, check with the `Admin` user whether login with password and admin privileges works.

--> Go back to 'config.xml' and modify:
   
<useSecurity>false</useSecurity>
   
   ****Change 'false' back to 'true'.
--> Restart the Jenkins server.
 

 
# Using Jenkins Environment Variables:
======================================

-> Jenkins pipeline exposes environment variables via the global variable `env`, which is available from anywhere within a 'Jenkinsfil'
.
   	**** jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables********
 
-> Below are some of  Jenkins Environment Variables:

	1. BUILD_ID - The current build ID, identical to **BUILD_NUMBER** for builds created.
 
	2. BUILD_NUMBER

	3. BUILD_TAG

	4. BUILD_URL

	5. JENKINS_URL

	6. JOB_NAME

	7. NODE_NAME

	8. WORKSPACE
 
  Example:-

--> Use the **Jenkins Pipeline (Declarative Pipeline)**.

--> In the Jenkins URL, we can see example code or copy the code when creating a new item in Jenkins for a pipeline job.

--> Replace the script with copied code and save it.

--> Build the job.

-->Expected Output Should be running on 'http://localhost:8080'.

-->If the port number is changed from `8080` to another port, but Jenkins still shows '8080', investigate why it is retaining the default port.




How to Parameterize the Jenkins Job:-
=====================================

-->Parameters/Varaibles  allow you to prompt users for inputs that will be passed into a build.

--> create a new job:

  --> In the general configuration of the job, check the option **"This project is parameterized"**.

 --> Click on the **"Add Parameter"** dropdown.

  -->Various parameters available:

     - Boolean

     - Choice

     - Credentials

     - File

     - Multi-line string

     - Password

     - Run

     - String

  For  Example:

   --> Click on "Choice Parameter".

   --> Define a simple parameter that can be selected from a list during a build.

   --> Name it 'Env' and provide multiple environment names as choices.

   --> Add a "Description" to inform users about the selection.

  -->  Click "Save".

  -->	When triggering the job, select **"Build with Parameters"** and choose the configured options.

  --> Click "Build".

  -->	This is how we create Parameterized Jobs.

 

Another Way of Creating Jenkins User:-
======================================

-->Manage Jenkins > Security > Disable "Keep me signed in".

-->This ensures users must sign in every time they access Jenkins services.

-->Manage Jenkins > Security > "Allow users to sign in"**

 --> Allows users to register and log in from the signup page.

 -->Useful for controlling user access.

-->It used to create user.
 




	

